
CarPlasmaSterilizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001ba  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800064  00800064  00000252  2**0
                  ALLOC
  3 .debug_aranges 00000058  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000019b  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000382  00000000  00000000  00000445  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000140  00000000  00000000  000007c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000350  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000227  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  00000f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00000f3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	c7 c0       	rjmp	.+398    	; 0x198 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	b6 c0       	rjmp	.+364    	; 0x184 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea eb       	ldi	r30, 0xBA	; 186
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a4 36       	cpi	r26, 0x64	; 100
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a4 e6       	ldi	r26, 0x64	; 100
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 36       	cpi	r26, 0x6A	; 106
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	ad d0       	rcall	.+346    	; 0x1ac <main>
  52:	b1 c0       	rjmp	.+354    	; 0x1b6 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <InitSystem>:
void HandleSystemPower(void);

/*** IMPLEMENTATION(S) ***/
void InitSystem(void)
{
	cli();
  56:	f8 94       	cli

	DDRB  = (1<<PB0) | (1<<PB2);				//UV_EN=output
  58:	85 e0       	ldi	r24, 0x05	; 5
  5a:	87 bb       	out	0x17, r24	; 23
	PORTB = (0<<PB2) | (0<<PB0);	//UV_EN=off, TOUCH_IN=pull-up
  5c:	18 ba       	out	0x18, r1	; 24
	
	DDRA  = (1<<PA7) | (1<<PA6) | (1<<PA2) | (1<<PA1) | (1<<PA5); //PLASMA_EN, DC18_EN, REDLED_EN, BLUELED_EN, FAN_EN=output
  5e:	86 ee       	ldi	r24, 0xE6	; 230
  60:	8a bb       	out	0x1a, r24	; 26
	PORTA = (0<<PA7) | (0<<PA6) | (0<<PA2) | (0<<PA1) | (0<<PA5); //PLASMA_EN, DC18_EN, REDLED_EN, BLUELED_EN, FAN_EN=off
  62:	1b ba       	out	0x1b, r1	; 27
	
	DIDR0 = (1<<ADC3D);								// ADC3 Digital Input Disable
  64:	88 e0       	ldi	r24, 0x08	; 8
  66:	81 b9       	out	0x01, r24	; 1
	ADMUX =  (1<<MUX1) | (1<<MUX0);		// Reference Vol : 1.1V, ADC3
  68:	93 e0       	ldi	r25, 0x03	; 3
  6a:	97 b9       	out	0x07, r25	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);	// ADC Frequency, /64
  6c:	86 e8       	ldi	r24, 0x86	; 134
  6e:	86 b9       	out	0x06, r24	; 6
	ADCSRB = (0<<ADLAR);							// left adjusted & Free Running mode
  70:	13 b8       	out	0x03, r1	; 3

	TCCR0A = (1<<WGM01) | (1<<WGM00);	// OC0x disconnected, fast PWM mode
  72:	90 bf       	out	0x30, r25	; 48
	TCCR0B = (1<<CS01);					// CLKtn=CLKio/8 => 1MHz/8=125KHz (8usec)
  74:	82 e0       	ldi	r24, 0x02	; 2
  76:	83 bf       	out	0x33, r24	; 51

	//GIMSK = (1<<PCIE1); // 1= 11 ~ 8 pcmsk1 0 = 7 ~ 0 pcmsk0
	//PCMSK1 = (1<<PCINT10);	// PCINT2 Enable
			// PCIE enable

	flag |= FLAG_PWR_bm;
  78:	80 91 64 00 	lds	r24, 0x0064
  7c:	80 68       	ori	r24, 0x80	; 128
  7e:	80 93 64 00 	sts	0x0064, r24
	
	sei();
  82:	78 94       	sei
}
  84:	08 95       	ret

00000086 <ReadAdcAndUpdateLed>:

void ReadAdcAndUpdateLed(void)
{
	uint16_t value;
	
	if(flag & FLAG_PWR_bm) // 
  86:	80 91 64 00 	lds	r24, 0x0064
  8a:	87 ff       	sbrs	r24, 7
  8c:	1e c0       	rjmp	.+60     	; 0xca <ReadAdcAndUpdateLed+0x44>
	{
		ADCSRA |= (1<<ADSC);				// Start ADC Conversion
  8e:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA & (1<<ADIF)) == 0);	// Wait for completion of ADC
  90:	34 9b       	sbis	0x06, 4	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <ReadAdcAndUpdateLed+0xa>

		ADCSRA |= (1<<ADIF);				// Clear ADC Interrupt flag
  94:	34 9a       	sbi	0x06, 4	; 6

		value = ADCL;
  96:	84 b1       	in	r24, 0x04	; 4
		value = ((ADCH)<<8)|value; 
  98:	85 b1       	in	r24, 0x05	; 5
		
		if( PINB & (1<<CHARGER_IN) )
  9a:	b1 9b       	sbis	0x16, 1	; 22
  9c:	0a c0       	rjmp	.+20     	; 0xb2 <ReadAdcAndUpdateLed+0x2c>
		{
			charger_mode = DO_CHARGING;
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	80 93 65 00 	sts	0x0065, r24
			//PORTA  &= ~(1<<BLUELED_EN); // BLUELED Off
			PORTA  |= (1<<REDLED_EN); // REDLED On
  a4:	da 9a       	sbi	0x1b, 2	; 27
			flag |= FLAG_PWR_bm;
  a6:	80 91 64 00 	lds	r24, 0x0064
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	80 93 64 00 	sts	0x0064, r24
  b0:	08 95       	ret

		}
		else
		{
			charger_mode = NO_CHARGING;
  b2:	10 92 65 00 	sts	0x0065, r1
			PORTA  &= ~(1<<REDLED_EN); // REDLED Off
  b6:	da 98       	cbi	0x1b, 2	; 27
			flag |= FLAG_PWR_bm;
  b8:	80 91 64 00 	lds	r24, 0x0064
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 93 64 00 	sts	0x0064, r24
			led_cnt=0;
  c2:	10 92 69 00 	sts	0x0069, r1
  c6:	10 92 68 00 	sts	0x0068, r1
  ca:	08 95       	ret

000000cc <HandleSystem>:
	}
}

void HandleSystem(void)
{
	flag |= FLAG_PLASMA_bm;
  cc:	80 91 64 00 	lds	r24, 0x0064
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	80 93 64 00 	sts	0x0064, r24
	flag |= FLAG_PWR_bm;
  d6:	80 91 64 00 	lds	r24, 0x0064
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 93 64 00 	sts	0x0064, r24
	flag |= FLAG_BIT5_bm;
  e0:	80 91 64 00 	lds	r24, 0x0064
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	80 93 64 00 	sts	0x0064, r24
	
	PORTB |= (1<<UV_EN); //UV ON
  ea:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= (1<<FAN_EN); // FAN1 ON
  ec:	c2 9a       	sbi	0x18, 2	; 24
	PORTA |= (1<<BLUELED_EN); //BLUE LED ON
  ee:	d9 9a       	sbi	0x1b, 1	; 27
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f4:	29 e1       	ldi	r18, 0x19	; 25
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <__stack+0x1b>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <__stack+0x19>
	
	_delay_ms(1000);
	
	PORTA |= (1<<FAN_EN2); //BLUE LED + FAN2 ON
 102:	dd 9a       	sbi	0x1b, 5	; 27
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	97 e2       	ldi	r25, 0x27	; 39
 108:	29 e1       	ldi	r18, 0x19	; 25
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <__stack+0x2f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 112:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 114:	d9 f7       	brne	.-10     	; 0x10c <__stack+0x2d>
	
	_delay_ms(1000);
	
	PORTA |= (1<<DC18_EN); // DC18 On
 116:	de 9a       	sbi	0x1b, 6	; 27
	PORTA |= (1<<PLASMA_EN); // PLASMA On
 118:	df 9a       	sbi	0x1b, 7	; 27
	return;
}
 11a:	08 95       	ret

0000011c <HandleSystemTick>:
void HandleSystemTick(void)
{
		//1. wake-up check routine

		//2. other timer services
		if( flag & FLAG_PLASMA_bm )
 11c:	80 91 64 00 	lds	r24, 0x0064
 120:	84 ff       	sbrs	r24, 4
 122:	25 c0       	rjmp	.+74     	; 0x16e <HandleSystemTick+0x52>
		{
			++plasma_cnt;
 124:	80 91 66 00 	lds	r24, 0x0066
 128:	90 91 67 00 	lds	r25, 0x0067
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 67 00 	sts	0x0067, r25
 132:	80 93 66 00 	sts	0x0066, r24
			if( plasma_duty == plasma_cnt )
 136:	20 91 62 00 	lds	r18, 0x0062
 13a:	30 91 63 00 	lds	r19, 0x0063
 13e:	80 91 66 00 	lds	r24, 0x0066
 142:	90 91 67 00 	lds	r25, 0x0067
 146:	28 17       	cp	r18, r24
 148:	39 07       	cpc	r19, r25
 14a:	09 f4       	brne	.+2      	; 0x14e <HandleSystemTick+0x32>
			{
				PORTA  &= ~(1<<PLASMA_EN); // PLASMA Off
 14c:	df 98       	cbi	0x1b, 7	; 27
			} 	
			if( plasma_period == plasma_cnt )
 14e:	20 91 60 00 	lds	r18, 0x0060
 152:	30 91 61 00 	lds	r19, 0x0061
 156:	80 91 66 00 	lds	r24, 0x0066
 15a:	90 91 67 00 	lds	r25, 0x0067
 15e:	28 17       	cp	r18, r24
 160:	39 07       	cpc	r19, r25
 162:	29 f4       	brne	.+10     	; 0x16e <HandleSystemTick+0x52>
			{
				PORTA  |= (1<<PLASMA_EN); // PLASMA On
 164:	df 9a       	sbi	0x1b, 7	; 27
				plasma_cnt = 0;
 166:	10 92 67 00 	sts	0x0067, r1
 16a:	10 92 66 00 	sts	0x0066, r1
 16e:	08 95       	ret

00000170 <__vector_2>:
		return;
}
				

ISR(PCINT0_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
	//PORTB ^= (1<<PB3); //debug code, remove me
}
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_11>:



ISR(TIM0_OVF_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
	//PORTB ^= (1<<PB3); //debug code, remove me
}
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_4>:



ISR(WDT_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
	//PORTB ^= (1<<PB3); //debug code, remove me
	//PORTB &= ~(1<<PB3); //debug code, remove me
}
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <main>:



int main(void)
{
	InitSystem();
 1ac:	54 df       	rcall	.-344    	; 0x56 <InitSystem>
	HandleSystem();
 1ae:	8e df       	rcall	.-228    	; 0xcc <HandleSystem>
	
	while(1)
	{
		ReadAdcAndUpdateLed();
 1b0:	6a df       	rcall	.-300    	; 0x86 <ReadAdcAndUpdateLed>
		HandleSystemTick();
 1b2:	b4 df       	rcall	.-152    	; 0x11c <HandleSystemTick>
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <main+0x4>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
